https://www.geeksforgeeks.org/longest-even-length-substring-sum-first-second-half/

Given a string ‘str’ of digits, find the length of the longest substring of ‘str’, such that the length of the substring is 2k digits and sum of left k digits is equal to the sum of right k digits. 

Examples : 

Input: str = "123123"
Output: 6
The complete string is of even length and sum of first and second
half digits is same

Input: str = "1538023"
Output: 4
The longest substring with same first and second half sum is "5380"

SOLUTION
--------

public class longestEvenSubstring {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        int maxi = 0;
//        for(int i=0;i<s.length();i++) {
//            for(int j=i+1;j<s.length();j+=2) { //we start from j=i+1..coz we want even substr and also j+=2: for the same even length
//                int len = j-i+1; //this is the substring.
//                int lsum=0, rsum=0;
//                for(int k=0;k<len/2;k++) {
//                    lsum+=(s.charAt(k+i)-'0');
//                    rsum+=(s.charAt(k+len/2+i)-'0');
//                }
//                if(lsum == rsum && maxi<len) maxi = len;
//            }
//        }
    //[A O(n2) time and O(1) extra space solution] 
    //The idea is to consider all possible mid points (of even length substrings) and keep expanding on both sides to get and update optimal length as the sum of two sides become equal. 
        for(int i=0;i<s.length()-1;i++) {
            int l = i, r = i+1;
            int lsum = 0, rsum = 0;
            while(r<s.length() && l>=0) {
                lsum+=s.charAt(l)-'0';
                rsum+=s.charAt(r)-'0';
                if(lsum == rsum && maxi<(r-l+1)) {
                    maxi = r-l+1;
                }
                l--;
                r++;
            }
        }
        System.out.println(maxi);
    }
}
